#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'occluded_ball':
            Get shader desc: occluded_ball_shader_desc()
            Vertex shader: occluded_ball_vs
                Attribute slots:
                    ATTR_occluded_ball_vs_position = 0
                    ATTR_occluded_ball_vs_normal = 1
                Uniform block 'occluded_ball_vs_params':
                    C struct: occluded_ball_vs_params_t
                    Bind slot: SLOT_occluded_ball_vs_params = 0
            Fragment shader: occluded_ball_fs
                Uniform block 'occluded_ball_fs_params':
                    C struct: occluded_ball_fs_params_t
                    Bind slot: SLOT_occluded_ball_fs_params = 0


    Shader descriptor structs:

        sg_shader occluded_ball = sg_make_shader(occluded_ball_shader_desc());

    Vertex attribute locations for vertex shader 'occluded_ball_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_occluded_ball_vs_position] = { ... },
                    [ATTR_occluded_ball_vs_normal] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'occluded_ball_vs_params':

        occluded_ball_vs_params_t occluded_ball_vs_params = {
            .model_mat = ...;
            .proj_view_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_occluded_ball_vs_params, &occluded_ball_vs_params, sizeof(occluded_ball_vs_params));

    Bind slot and C-struct for uniform block 'occluded_ball_fs_params':

        occluded_ball_fs_params_t occluded_ball_fs_params = {
            .ball_position = ...;
            .cam_position = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_occluded_ball_fs_params, &occluded_ball_fs_params, sizeof(occluded_ball_fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_occluded_ball_vs_position (0)
#define ATTR_occluded_ball_vs_normal (1)
#define SLOT_occluded_ball_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct occluded_ball_vs_params_t {
    mat4 model_mat;
    mat4 proj_view_mat;
} occluded_ball_vs_params_t;
#pragma pack(pop)
#define SLOT_occluded_ball_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct occluded_ball_fs_params_t {
    vec4 ball_position;
    vec4 cam_position;
} occluded_ball_fs_params_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 occluded_ball_vs_params[8];
    out vec3 frag_normal;
    layout(location = 1) in vec3 normal;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        mat4 _20 = mat4(occluded_ball_vs_params[0], occluded_ball_vs_params[1], occluded_ball_vs_params[2], occluded_ball_vs_params[3]);
        frag_normal = normalize((inverse(transpose(_20)) * vec4(normal, 0.0)).xyz);
        gl_Position = (mat4(occluded_ball_vs_params[4], occluded_ball_vs_params[5], occluded_ball_vs_params[6], occluded_ball_vs_params[7]) * _20) * vec4(position, 1.0);
    }
    
*/
static const char occluded_ball_vs_source_glsl330[551] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x63,0x63,0x6c,0x75,
    0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x32,0x30,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6f,0x63,0x63,0x6c,
    0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,
    0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,
    0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,
    0x65,0x28,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x5f,0x32,0x30,0x29,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,
    0x6d,0x61,0x74,0x34,0x28,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,
    0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,
    0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x6f,0x63,0x63,
    0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,
    0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x32,0x30,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 occluded_ball_fs_params[2];
    in vec3 frag_normal;
    layout(location = 0) out vec4 g_frag_color;
    
    void main()
    {
        float _37 = min(max(dot(frag_normal, normalize(occluded_ball_fs_params[1].xyz - occluded_ball_fs_params[0].xyz)), 0.0), 1.0);
        float _43 = 0.20000000298023223876953125 + (0.5 * _37);
        g_frag_color = vec4(_43, _43, _43, 0.100000001490116119384765625 + (0.5 * (1.0 - _37)));
    }
    
*/
static const char occluded_ball_fs_source_glsl330[422] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x63,0x63,0x6c,0x75,
    0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x64,
    0x6f,0x74,0x28,0x66,0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6f,0x63,0x63,0x6c,0x75,0x64,
    0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2d,0x20,0x6f,0x63,0x63,0x6c,0x75,
    0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x34,0x33,0x20,0x3d,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,
    0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x5f,
    0x33,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x34,0x33,
    0x2c,0x20,0x5f,0x34,0x33,0x2c,0x20,0x5f,0x34,0x33,0x2c,0x20,0x30,0x2e,0x31,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,
    0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,
    0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x33,0x37,0x29,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 occluded_ball_vs_params[8];
    out vec3 frag_normal;
    layout(location = 1) in vec3 normal;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        mat4 _20 = mat4(occluded_ball_vs_params[0], occluded_ball_vs_params[1], occluded_ball_vs_params[2], occluded_ball_vs_params[3]);
        frag_normal = normalize((inverse(transpose(_20)) * vec4(normal, 0.0)).xyz);
        gl_Position = (mat4(occluded_ball_vs_params[4], occluded_ball_vs_params[5], occluded_ball_vs_params[6], occluded_ball_vs_params[7]) * _20) * vec4(position, 1.0);
    }
    
*/
static const char occluded_ball_vs_source_glsl300es[554] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x63,
    0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x5f,0x32,0x30,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6f,
    0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,
    0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,
    0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x69,0x6e,0x76,
    0x65,0x72,0x73,0x65,0x28,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x5f,
    0x32,0x30,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,
    0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x34,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,
    0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,
    0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x6f,0x63,0x63,0x6c,
    0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x32,0x30,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 occluded_ball_fs_params[2];
    in highp vec3 frag_normal;
    layout(location = 0) out highp vec4 g_frag_color;
    
    void main()
    {
        highp float _37 = min(max(dot(frag_normal, normalize(occluded_ball_fs_params[1].xyz - occluded_ball_fs_params[0].xyz)), 0.0), 1.0);
        highp float _43 = 0.20000000298023223876953125 + (0.5 * _37);
        g_frag_color = vec4(_43, _43, _43, 0.100000001490116119384765625 + (0.5 * (1.0 - _37)));
    }
    
*/
static const char occluded_ball_fs_source_glsl300es[501] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,0x5f,
    0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,
    0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x66,0x72,0x61,0x67,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,0x6c,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x20,0x2d,0x20,0x6f,0x63,0x63,0x6c,0x75,0x64,0x65,0x64,0x5f,0x62,0x61,0x6c,
    0x6c,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x34,0x33,0x20,0x3d,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,
    0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,
    0x33,0x31,0x32,0x35,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x5f,0x33,
    0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x34,0x33,0x2c,
    0x20,0x5f,0x34,0x33,0x2c,0x20,0x5f,0x34,0x33,0x2c,0x20,0x30,0x2e,0x31,0x30,0x30,
    0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,
    0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,0x20,
    0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x33,0x37,0x29,0x29,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before occluded_ball.h"
#endif
static inline const sg_shader_desc* occluded_ball_shader_desc(void) {
  #if defined(SOKOL_GLCORE33)
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal";
      desc.vs.source = occluded_ball_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].uniforms[0].name = "occluded_ball_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = occluded_ball_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "occluded_ball_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.label = "occluded_ball_shader";
    };
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES3)
  if (sg_query_backend() == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal";
      desc.vs.source = occluded_ball_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].uniforms[0].name = "occluded_ball_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = occluded_ball_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "occluded_ball_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.label = "occluded_ball_shader";
    };
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  return 0; /* can't happen */
}
