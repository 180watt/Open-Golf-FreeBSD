#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input data/shaders/aim_helper.glsl --output src/golf/shaders/aim_helper.glsl.h --slang glsl330:glsl300es

    Overview:

        Shader program 'aim_helper':
            Get shader desc: aim_helper_shader_desc(sg_query_backend());
            Vertex shader: aim_helper_vs
                Attribute slots:
                    ATTR_aim_helper_vs_position = 0
                    ATTR_aim_helper_vs_texture_coord = 1
                Uniform block 'aim_helper_vs_params':
                    C struct: aim_helper_vs_params_t
                    Bind slot: SLOT_aim_helper_vs_params = 0
            Fragment shader: aim_helper_fs
                Uniform block 'aim_helper_fs_params':
                    C struct: aim_helper_fs_params_t
                    Bind slot: SLOT_aim_helper_fs_params = 0
                Image 'aim_helper_image':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_aim_helper_image = 0


    Shader descriptor structs:

        sg_shader aim_helper = sg_make_shader(aim_helper_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'aim_helper_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_aim_helper_vs_position] = { ... },
                    [ATTR_aim_helper_vs_texture_coord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_aim_helper_image = 0;

    Bind slot and C-struct for uniform block 'aim_helper_vs_params':

        aim_helper_vs_params_t aim_helper_vs_params = {
            .mvp_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_aim_helper_vs_params, &SG_RANGE(aim_helper_vs_params));

    Bind slot and C-struct for uniform block 'aim_helper_fs_params':

        aim_helper_fs_params_t aim_helper_fs_params = {
            .color = ...;
            .texture_coord_offset = ...;
            .texture_coord_scale = ...;
            .length0 = ...;
            .length1 = ...;
            .total_length = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_aim_helper_fs_params, &SG_RANGE(aim_helper_fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_aim_helper_vs_position (0)
#define ATTR_aim_helper_vs_texture_coord (1)
#define SLOT_aim_helper_image (0)
#define SLOT_aim_helper_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct aim_helper_vs_params_t {
    mat4 mvp_mat;
} aim_helper_vs_params_t;
#pragma pack(pop)
#define SLOT_aim_helper_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct aim_helper_fs_params_t {
    vec4 color;
    vec2 texture_coord_offset;
    vec2 texture_coord_scale;
    float length0;
    float length1;
    float total_length;
    uint8_t _pad_44[4];
} aim_helper_fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 aim_helper_vs_params[4];
    out vec2 frag_texture_coord;
    layout(location = 1) in vec2 texture_coord;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        frag_texture_coord = texture_coord;
        gl_Position = mat4(aim_helper_vs_params[0], aim_helper_vs_params[1], aim_helper_vs_params[2], aim_helper_vs_params[3]) * vec4(position, 1.0);
    }
    
*/
static const char aim_helper_vs_source_glsl330[369] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x61,0x69,0x6d,
    0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 330
    
    uniform vec4 aim_helper_fs_params[3];
    uniform sampler2D aim_helper_image;
    
    in vec2 frag_texture_coord;
    layout(location = 0) out vec4 g_frag_color;
    
    void main()
    {
        float a = texture(aim_helper_image, (aim_helper_fs_params[1].zw * frag_texture_coord) + aim_helper_fs_params[1].xy).w;
        float _58 = (aim_helper_fs_params[2].x + ((aim_helper_fs_params[2].y - aim_helper_fs_params[2].x) * frag_texture_coord.x)) / aim_helper_fs_params[2].z;
        if (_58 > 0.4000000059604644775390625)
        {
            float _71 = 1.0 - ((_58 - 0.4000000059604644775390625) * 1.66666662693023681640625);
            a = (a * _71) * _71;
        }
        g_frag_color = vec4(aim_helper_fs_params[0].xyz, aim_helper_fs_params[0].w * a);
    }
    
*/
static const char aim_helper_fs_source_glsl330[721] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,
    0x5f,0x69,0x6d,0x61,0x67,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,
    0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,
    0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2e,0x7a,0x77,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x29,0x20,0x2b,0x20,0x61,0x69,0x6d,0x5f,
    0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x5d,0x2e,0x78,0x79,0x29,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x28,0x61,0x69,0x6d,0x5f,
    0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x28,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,
    0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2e,0x79,0x20,0x2d,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x29,
    0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x29,0x29,0x20,0x2f,0x20,0x61,0x69,0x6d,0x5f,
    0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x35,0x38,0x20,0x3e,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,
    0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x31,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,
    0x2d,0x20,0x28,0x28,0x5f,0x35,0x38,0x20,0x2d,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,
    0x39,0x30,0x36,0x32,0x35,0x29,0x20,0x2a,0x20,0x31,0x2e,0x36,0x36,0x36,0x36,0x36,
    0x36,0x36,0x32,0x36,0x39,0x33,0x30,0x32,0x33,0x36,0x38,0x31,0x36,0x34,0x30,0x36,
    0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x20,0x3d,
    0x20,0x28,0x61,0x20,0x2a,0x20,0x5f,0x37,0x31,0x29,0x20,0x2a,0x20,0x5f,0x37,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x61,0x69,0x6d,
    0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x61,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 300 es
    
    uniform vec4 aim_helper_vs_params[4];
    out vec2 frag_texture_coord;
    layout(location = 1) in vec2 texture_coord;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        frag_texture_coord = texture_coord;
        gl_Position = mat4(aim_helper_vs_params[0], aim_helper_vs_params[1], aim_helper_vs_params[2], aim_helper_vs_params[3]) * vec4(position, 1.0);
    }
    
*/
static const char aim_helper_vs_source_glsl300es[372] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x69,
    0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x61,0x69,
    0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,
    0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 aim_helper_fs_params[3];
    uniform highp sampler2D aim_helper_image;
    
    in highp vec2 frag_texture_coord;
    layout(location = 0) out highp vec4 g_frag_color;
    
    void main()
    {
        highp float a = texture(aim_helper_image, (aim_helper_fs_params[1].zw * frag_texture_coord) + aim_helper_fs_params[1].xy).w;
        highp float _58 = (aim_helper_fs_params[2].x + ((aim_helper_fs_params[2].y - aim_helper_fs_params[2].x) * frag_texture_coord.x)) / aim_helper_fs_params[2].z;
        if (_58 > 0.4000000059604644775390625)
        {
            highp float _71 = 1.0 - ((_58 - 0.4000000059604644775390625) * 1.66666662693023681640625);
            a = (a * _71) * _71;
        }
        g_frag_color = vec4(aim_helper_fs_params[0].xyz, aim_helper_fs_params[0].w * a);
    }
    
*/
static const char aim_helper_fs_source_glsl300es[812] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x69,0x6d,
    0x61,0x67,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,
    0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,
    0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,
    0x7a,0x77,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x29,0x20,0x2b,0x20,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2e,0x78,0x79,0x29,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,
    0x28,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x28,0x28,0x61,
    0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x79,0x20,0x2d,0x20,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x29,0x29,0x20,0x2f,
    0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x35,0x38,0x20,0x3e,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,
    0x39,0x30,0x36,0x32,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x37,0x31,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x28,0x5f,
    0x35,0x38,0x20,0x2d,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,
    0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,
    0x29,0x20,0x2a,0x20,0x31,0x2e,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x32,0x36,0x39,
    0x33,0x30,0x32,0x33,0x36,0x38,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x20,0x3d,0x20,0x28,0x61,0x20,0x2a,
    0x20,0x5f,0x37,0x31,0x29,0x20,0x2a,0x20,0x5f,0x37,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x69,0x6d,0x5f,0x68,
    0x65,0x6c,0x70,0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x61,0x69,0x6d,0x5f,0x68,0x65,0x6c,0x70,
    0x65,0x72,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x77,0x20,0x2a,0x20,0x61,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before aim_helper.glsl.h"
#endif
static inline const sg_shader_desc* aim_helper_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texture_coord";
      desc.vs.source = aim_helper_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "aim_helper_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = aim_helper_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].uniforms[0].name = "aim_helper_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.images[0].name = "aim_helper_image";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "aim_helper_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texture_coord";
      desc.vs.source = aim_helper_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "aim_helper_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = aim_helper_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].uniforms[0].name = "aim_helper_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.images[0].name = "aim_helper_image";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "aim_helper_shader";
    }
    return &desc;
  }
  return 0;
}
