#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input /Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl --output /Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl.h --slang metal_macos:metal_ios:glsl330

    Overview:

        Shader program 'cup':
            Get shader desc: cup_shader_desc(sg_query_backend());
            Vertex shader: cup_vs
                Attribute slots:
                    ATTR_cup_vs_position = 0
                    ATTR_cup_vs_lightmap_uv = 1
                Uniform block 'cup_vs_params':
                    C struct: cup_vs_params_t
                    Bind slot: SLOT_cup_vs_params = 0
            Fragment shader: cup_fs
                Image 'lightmap_tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_lightmap_tex = 0


    Shader descriptor structs:

        sg_shader cup = sg_make_shader(cup_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'cup_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_cup_vs_position] = { ... },
                    [ATTR_cup_vs_lightmap_uv] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_lightmap_tex = 0;

    Bind slot and C-struct for uniform block 'cup_vs_params':

        cup_vs_params_t cup_vs_params = {
            .proj_view_mat = ...;
            .model_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_cup_vs_params, &SG_RANGE(cup_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_cup_vs_position (0)
#define ATTR_cup_vs_lightmap_uv (1)
#define SLOT_lightmap_tex (0)
#define SLOT_cup_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct cup_vs_params_t {
    mat4 proj_view_mat;
    mat4 model_mat;
} cup_vs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 cup_vs_params[8];
    out vec2 frag_lightmap_uv;
    layout(location = 1) in vec2 lightmap_uv;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        frag_lightmap_uv = lightmap_uv;
        gl_Position = (mat4(cup_vs_params[0], cup_vs_params[1], cup_vs_params[2], cup_vs_params[3]) * mat4(cup_vs_params[4], cup_vs_params[5], cup_vs_params[6], cup_vs_params[7])) * vec4(position, 1.0);
    }
    
*/
static const char cup_vs_source_glsl330[407] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x75,0x70,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x6d,0x61,0x70,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,0x20,0x3d,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,
    0x61,0x74,0x34,0x28,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x34,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D lightmap_tex;
    
    in vec2 frag_lightmap_uv;
    layout(location = 0) out vec4 g_frag_color;
    
    void main()
    {
        g_frag_color = vec4(texture(lightmap_tex, frag_lightmap_uv).xxx, 1.0);
    }
    
*/
static const char cup_fs_source_glsl330[211] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,0x3b,0x0a,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,
    0x2c,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,
    0x75,0x76,0x29,0x2e,0x78,0x78,0x78,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct cup_vs_params
    {
        float4x4 proj_view_mat;
        float4x4 model_mat;
    };
    
    struct main0_out
    {
        float2 frag_lightmap_uv [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
        float2 lightmap_uv [[attribute(1)]];
    };
    
    #line 17 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant cup_vs_params& _27 [[buffer(0)]])
    {
        main0_out out = {};
    #line 17 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.frag_lightmap_uv = in.lightmap_uv;
    #line 18 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.gl_Position = (_27.proj_view_mat * _27.model_mat) * float4(in.position, 1.0);
        return out;
    }
    
*/
static const char cup_vs_source_metal_macos[840] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x63,
    0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x70,0x72,0x6f,0x6a,
    0x5f,0x76,0x69,0x65,0x77,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x6d,0x61,
    0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,
    0x61,0x70,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,
    0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,
    0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,
    0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,
    0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,
    0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,
    0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x37,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x55,0x73,
    0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,0x64,0x65,
    0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,
    0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,
    0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,
    0x70,0x5f,0x75,0x76,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,0x22,
    0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,
    0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,
    0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x28,0x5f,0x32,0x37,0x2e,0x70,0x72,0x6f,0x6a,0x5f,0x76,0x69,
    0x65,0x77,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x6d,0x6f,0x64,
    0x65,0x6c,0x5f,0x6d,0x61,0x74,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 g_frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 frag_lightmap_uv [[user(locn0)]];
    };
    
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> lightmap_tex [[texture(0)]], sampler lightmap_texSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.g_frag_color = float4(lightmap_tex.sample(lightmap_texSmplr, in.frag_lightmap_uv).xxx, 1.0);
        return out;
    }
    
*/
static const char cup_fs_source_metal_macos[630] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,
    0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,
    0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,
    0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,
    0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,
    0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,
    0x70,0x5f,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x2f,
    0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,
    0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,
    0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6c,
    0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,
    0x2c,0x20,0x69,0x6e,0x2e,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,
    0x61,0x70,0x5f,0x75,0x76,0x29,0x2e,0x78,0x78,0x78,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct cup_vs_params
    {
        float4x4 proj_view_mat;
        float4x4 model_mat;
    };
    
    struct main0_out
    {
        float2 frag_lightmap_uv [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
        float2 lightmap_uv [[attribute(1)]];
    };
    
    #line 17 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant cup_vs_params& _27 [[buffer(0)]])
    {
        main0_out out = {};
    #line 17 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.frag_lightmap_uv = in.lightmap_uv;
    #line 18 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.gl_Position = (_27.proj_view_mat * _27.model_mat) * float4(in.position, 1.0);
        return out;
    }
    
*/
static const char cup_vs_source_metal_ios[840] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x63,
    0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x70,0x72,0x6f,0x6a,
    0x5f,0x76,0x69,0x65,0x77,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x6d,0x61,
    0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,
    0x61,0x70,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,
    0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x75,0x76,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,
    0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,
    0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,
    0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,
    0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,
    0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x63,0x75,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x37,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x55,0x73,
    0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,0x64,0x65,
    0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,
    0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,
    0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,
    0x70,0x5f,0x75,0x76,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,0x22,
    0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,
    0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,
    0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x28,0x5f,0x32,0x37,0x2e,0x70,0x72,0x6f,0x6a,0x5f,0x76,0x69,
    0x65,0x77,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x6d,0x6f,0x64,
    0x65,0x6c,0x5f,0x6d,0x61,0x74,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 g_frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 frag_lightmap_uv [[user(locn0)]];
    };
    
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> lightmap_tex [[texture(0)]], sampler lightmap_texSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/cup.glsl"
        out.g_frag_color = float4(lightmap_tex.sample(lightmap_texSmplr, in.frag_lightmap_uv).xxx, 1.0);
        return out;
    }
    
*/
static const char cup_fs_source_metal_ios[630] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,
    0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,
    0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,
    0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,
    0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,
    0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x6c,0x69,0x67,0x68,0x74,0x6d,0x61,
    0x70,0x5f,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x2f,
    0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,
    0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,
    0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x63,0x75,0x70,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6c,
    0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x5f,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,
    0x2c,0x20,0x69,0x6e,0x2e,0x66,0x72,0x61,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x6d,
    0x61,0x70,0x5f,0x75,0x76,0x29,0x2e,0x78,0x78,0x78,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before cup.glsl.h"
#endif
static inline const sg_shader_desc* cup_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "lightmap_uv";
      desc.vs.source = cup_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].uniforms[0].name = "cup_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = cup_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "lightmap_tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "cup_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = cup_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 128;
      desc.fs.source = cup_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "lightmap_tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "cup_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = cup_vs_source_metal_ios;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 128;
      desc.fs.source = cup_fs_source_metal_ios;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "lightmap_tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "cup_shader";
    }
    return &desc;
  }
  return 0;
}
