#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'texture':
            Get shader desc: texture_shader_desc()
            Vertex shader: texture_vs
                Attribute slots:
                    ATTR_texture_vs_position = 0
                    ATTR_texture_vs_texture_coord = 1
                Uniform block 'texture_vs_params':
                    C struct: texture_vs_params_t
                    Bind slot: SLOT_texture_vs_params = 0
            Fragment shader: texture_fs
                Image 'texture_image':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_texture_image = 0


    Shader descriptor structs:

        sg_shader texture = sg_make_shader(texture_shader_desc());

    Vertex attribute locations for vertex shader 'texture_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_texture_vs_position] = { ... },
                    [ATTR_texture_vs_texture_coord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_texture_image = 0;

    Bind slot and C-struct for uniform block 'texture_vs_params':

        texture_vs_params_t texture_vs_params = {
            .mvp_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_texture_vs_params, &texture_vs_params, sizeof(texture_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_texture_vs_position (0)
#define ATTR_texture_vs_texture_coord (1)
#define SLOT_texture_image (0)
#define SLOT_texture_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct texture_vs_params_t {
    mat4 mvp_mat;
} texture_vs_params_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 texture_vs_params[4];
    out vec2 frag_texture_coord;
    layout(location = 1) in vec2 texture_coord;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        frag_texture_coord = texture_coord;
        gl_Position = mat4(texture_vs_params[0], texture_vs_params[1], texture_vs_params[2], texture_vs_params[3]) * vec4(position, 1.0);
    }
    
*/
static const char texture_vs_source_glsl330[354] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x30,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D texture_image;
    
    in vec2 frag_texture_coord;
    layout(location = 0) out vec4 g_frag_color;
    
    void main()
    {
        vec2 _39 = vec2(1.0 / float(textureSize(texture_image, 0).x), 1.0 / float(textureSize(texture_image, 0).y));
        vec4 _55 = vec4(frag_texture_coord, frag_texture_coord - (_39 * 0.75));
        vec2 _61 = _55.zw;
        vec2 _98 = _55.xy;
        float _109 = dot(textureLod(texture_image, _61, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _113 = dot(textureLod(texture_image, _61 + (vec2(1.0, 0.0) * _39), 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _117 = dot(textureLod(texture_image, _61 + (vec2(0.0, 1.0) * _39), 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _121 = dot(textureLod(texture_image, _61 + _39, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _125 = dot(textureLod(texture_image, _98, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _149 = _109 + _113;
        float _154 = -(_149 - (_117 + _121));
        vec2 dir;
        vec2 _272 = dir;
        _272.x = _154;
        float _162 = (_109 + _117) - (_113 + _121);
        vec2 _274 = _272;
        _274.y = _162;
        vec2 _197 = min(vec2(8.0), max(vec2(-8.0), _274 * (1.0 / (min(abs(_154), abs(_162)) + max(((_149 + _117) + _121) * 0.03125, 0.0078125))))) * _39;
        dir = _197;
        vec3 _219 = (textureLod(texture_image, _98 + (_197 * (-0.16666667163372039794921875)), 0.0).xyz + textureLod(texture_image, _98 + (_197 * 0.16666667163372039794921875), 0.0).xyz) * 0.5;
        vec3 _243 = (_219 * 0.5) + ((textureLod(texture_image, _98 + (_197 * (-0.5)), 0.0).xyz + textureLod(texture_image, _98 + (_197 * 0.5), 0.0).xyz) * 0.25);
        float _247 = dot(_243, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        if ((_247 < min(_125, min(min(_109, _113), min(_117, _121)))) || (_247 > max(_125, max(max(_109, _113), max(_117, _121)))))
        {
            g_frag_color = vec4(_219, 1.0);
        }
        else
        {
            g_frag_color = vec4(_243, 1.0);
        }
    }
    
*/
static const char texture_fs_source_glsl330[2301] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x3b,0x0a,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x33,0x39,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x20,0x2f,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,
    0x7a,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,
    0x2c,0x20,0x30,0x29,0x2e,0x78,0x29,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,
    0x30,0x29,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x35,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x66,0x72,0x61,0x67,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x2c,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x2d,0x20,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x30,0x2e,0x37,0x35,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x36,0x31,
    0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x7a,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x39,0x38,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x39,
    0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,
    0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,
    0x20,0x5f,0x36,0x31,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,
    0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,
    0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,
    0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,
    0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,
    0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x33,0x20,0x3d,0x20,0x64,
    0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x36,0x31,
    0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x39,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,
    0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,
    0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,
    0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,
    0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,
    0x37,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,
    0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,
    0x2c,0x20,0x5f,0x36,0x31,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x39,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,
    0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,
    0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,
    0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,
    0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,
    0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x36,0x31,0x20,0x2b,0x20,0x5f,0x33,0x39,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,
    0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,
    0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,
    0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,
    0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,
    0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x35,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,
    0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,
    0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,
    0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,
    0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,
    0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,
    0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x34,0x39,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x20,0x2b,0x20,0x5f,0x31,
    0x31,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x35,0x34,0x20,0x3d,0x20,0x2d,0x28,0x5f,0x31,0x34,0x39,0x20,0x2d,0x20,0x28,0x5f,
    0x31,0x31,0x37,0x20,0x2b,0x20,0x5f,0x31,0x32,0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x32,0x20,0x3d,0x20,0x64,0x69,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x32,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,
    0x35,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x36,0x32,0x20,0x3d,0x20,0x28,0x5f,0x31,0x30,0x39,0x20,0x2b,0x20,0x5f,0x31,0x31,
    0x37,0x29,0x20,0x2d,0x20,0x28,0x5f,0x31,0x31,0x33,0x20,0x2b,0x20,0x5f,0x31,0x32,
    0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,
    0x34,0x20,0x3d,0x20,0x5f,0x32,0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,
    0x37,0x34,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x36,0x32,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x39,0x37,0x20,0x3d,0x20,0x6d,0x69,0x6e,
    0x28,0x76,0x65,0x63,0x32,0x28,0x38,0x2e,0x30,0x29,0x2c,0x20,0x6d,0x61,0x78,0x28,
    0x76,0x65,0x63,0x32,0x28,0x2d,0x38,0x2e,0x30,0x29,0x2c,0x20,0x5f,0x32,0x37,0x34,
    0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x6d,0x69,0x6e,0x28,0x61,
    0x62,0x73,0x28,0x5f,0x31,0x35,0x34,0x29,0x2c,0x20,0x61,0x62,0x73,0x28,0x5f,0x31,
    0x36,0x32,0x29,0x29,0x20,0x2b,0x20,0x6d,0x61,0x78,0x28,0x28,0x28,0x5f,0x31,0x34,
    0x39,0x20,0x2b,0x20,0x5f,0x31,0x31,0x37,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x31,
    0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,
    0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x33,
    0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x69,0x72,0x20,0x3d,0x20,0x5f,0x31,0x39,
    0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x31,0x39,
    0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,
    0x38,0x20,0x2b,0x20,0x28,0x5f,0x31,0x39,0x37,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,
    0x31,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,
    0x39,0x37,0x39,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,
    0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,0x2b,0x20,0x28,0x5f,0x31,0x39,0x37,0x20,0x2a,
    0x20,0x30,0x2e,0x31,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,
    0x32,0x30,0x33,0x39,0x37,0x39,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x34,0x33,0x20,0x3d,
    0x20,0x28,0x5f,0x32,0x31,0x39,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,
    0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,
    0x2b,0x20,0x28,0x5f,0x31,0x39,0x37,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x35,0x29,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,0x2b,0x20,0x28,0x5f,
    0x31,0x39,0x37,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x35,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x34,0x37,0x20,0x3d,0x20,
    0x64,0x6f,0x74,0x28,0x5f,0x32,0x34,0x33,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,
    0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,
    0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,
    0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,
    0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,
    0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x28,0x5f,0x32,0x34,0x37,0x20,0x3c,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,0x35,
    0x2c,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x30,0x39,0x2c,0x20,
    0x5f,0x31,0x31,0x33,0x29,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x31,0x37,0x2c,
    0x20,0x5f,0x31,0x32,0x31,0x29,0x29,0x29,0x29,0x20,0x7c,0x7c,0x20,0x28,0x5f,0x32,
    0x34,0x37,0x20,0x3e,0x20,0x6d,0x61,0x78,0x28,0x5f,0x31,0x32,0x35,0x2c,0x20,0x6d,
    0x61,0x78,0x28,0x6d,0x61,0x78,0x28,0x5f,0x31,0x30,0x39,0x2c,0x20,0x5f,0x31,0x31,
    0x33,0x29,0x2c,0x20,0x6d,0x61,0x78,0x28,0x5f,0x31,0x31,0x37,0x2c,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x29,0x29,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x31,0x39,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x34,0x33,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 texture_vs_params[4];
    out vec2 frag_texture_coord;
    layout(location = 1) in vec2 texture_coord;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        frag_texture_coord = texture_coord;
        gl_Position = mat4(texture_vs_params[0], texture_vs_params[1], texture_vs_params[2], texture_vs_params[3]) * vec4(position, 1.0);
    }
    
*/
static const char texture_vs_source_glsl300es[357] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,
    0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D texture_image;
    
    in highp vec2 frag_texture_coord;
    layout(location = 0) out highp vec4 g_frag_color;
    
    void main()
    {
        highp vec2 _39 = vec2(1.0 / float(textureSize(texture_image, 0).x), 1.0 / float(textureSize(texture_image, 0).y));
        highp vec4 _55 = vec4(frag_texture_coord, frag_texture_coord - (_39 * 0.75));
        highp vec2 _61 = _55.zw;
        highp vec2 _98 = _55.xy;
        highp float _109 = dot(textureLod(texture_image, _61, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        highp float _113 = dot(textureLod(texture_image, _61 + (vec2(1.0, 0.0) * _39), 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        highp float _117 = dot(textureLod(texture_image, _61 + (vec2(0.0, 1.0) * _39), 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        highp float _121 = dot(textureLod(texture_image, _61 + _39, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        highp float _125 = dot(textureLod(texture_image, _98, 0.0).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        highp float _149 = _109 + _113;
        highp float _154 = -(_149 - (_117 + _121));
        highp vec2 dir;
        highp vec2 _272 = dir;
        _272.x = _154;
        highp float _162 = (_109 + _117) - (_113 + _121);
        highp vec2 _274 = _272;
        _274.y = _162;
        highp vec2 _197 = min(vec2(8.0), max(vec2(-8.0), _274 * (1.0 / (min(abs(_154), abs(_162)) + max(((_149 + _117) + _121) * 0.03125, 0.0078125))))) * _39;
        dir = _197;
        highp vec3 _219 = (textureLod(texture_image, _98 + (_197 * (-0.16666667163372039794921875)), 0.0).xyz + textureLod(texture_image, _98 + (_197 * 0.16666667163372039794921875), 0.0).xyz) * 0.5;
        highp vec3 _243 = (_219 * 0.5) + ((textureLod(texture_image, _98 + (_197 * (-0.5)), 0.0).xyz + textureLod(texture_image, _98 + (_197 * 0.5), 0.0).xyz) * 0.25);
        highp float _247 = dot(_243, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        if ((_247 < min(_125, min(min(_109, _113), min(_117, _121)))) || (_247 > max(_125, max(max(_109, _113), max(_117, _121)))))
        {
            g_frag_color = vec4(_219, 1.0);
        }
        else
        {
            g_frag_color = vec4(_243, 1.0);
        }
    }
    
*/
static const char texture_fs_source_glsl300es[2482] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,
    0x6d,0x61,0x67,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x30,0x29,0x2e,0x78,0x29,
    0x2c,0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x30,0x29,0x2e,0x79,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x35,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x66,0x72,0x61,0x67,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,
    0x64,0x20,0x2d,0x20,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x30,0x2e,0x37,0x35,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x36,0x31,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x7a,0x77,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,
    0x39,0x38,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,
    0x39,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,
    0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,
    0x2c,0x20,0x5f,0x36,0x31,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,
    0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,
    0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,
    0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,
    0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x31,0x33,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,
    0x67,0x65,0x2c,0x20,0x5f,0x36,0x31,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x39,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,
    0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,
    0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,
    0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,
    0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,
    0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,
    0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,
    0x36,0x31,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x39,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,
    0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,
    0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,
    0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,
    0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x36,0x31,0x20,0x2b,0x20,
    0x5f,0x33,0x39,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,
    0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,
    0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,
    0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,
    0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,
    0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,
    0x35,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,
    0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,
    0x2c,0x20,0x5f,0x39,0x38,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,
    0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,
    0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,
    0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,
    0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x34,0x39,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x20,0x2b,0x20,0x5f,0x31,0x31,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x2d,0x28,0x5f,0x31,0x34,0x39,
    0x20,0x2d,0x20,0x28,0x5f,0x31,0x31,0x37,0x20,0x2b,0x20,0x5f,0x31,0x32,0x31,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x32,0x20,0x3d,0x20,0x64,0x69,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x32,0x2e,0x78,0x20,0x3d,0x20,0x5f,
    0x31,0x35,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x36,0x32,0x20,0x3d,0x20,0x28,0x5f,0x31,0x30,
    0x39,0x20,0x2b,0x20,0x5f,0x31,0x31,0x37,0x29,0x20,0x2d,0x20,0x28,0x5f,0x31,0x31,
    0x33,0x20,0x2b,0x20,0x5f,0x31,0x32,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x34,0x20,0x3d,
    0x20,0x5f,0x32,0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x34,0x2e,
    0x79,0x20,0x3d,0x20,0x5f,0x31,0x36,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x39,0x37,0x20,0x3d,0x20,
    0x6d,0x69,0x6e,0x28,0x76,0x65,0x63,0x32,0x28,0x38,0x2e,0x30,0x29,0x2c,0x20,0x6d,
    0x61,0x78,0x28,0x76,0x65,0x63,0x32,0x28,0x2d,0x38,0x2e,0x30,0x29,0x2c,0x20,0x5f,
    0x32,0x37,0x34,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x6d,0x69,
    0x6e,0x28,0x61,0x62,0x73,0x28,0x5f,0x31,0x35,0x34,0x29,0x2c,0x20,0x61,0x62,0x73,
    0x28,0x5f,0x31,0x36,0x32,0x29,0x29,0x20,0x2b,0x20,0x6d,0x61,0x78,0x28,0x28,0x28,
    0x5f,0x31,0x34,0x39,0x20,0x2b,0x20,0x5f,0x31,0x31,0x37,0x29,0x20,0x2b,0x20,0x5f,
    0x31,0x32,0x31,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x29,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x5f,0x33,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x69,0x72,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x31,0x39,0x20,0x3d,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,0x2b,0x20,0x28,0x5f,0x31,
    0x39,0x37,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x31,0x36,0x36,0x36,0x36,0x36,0x36,
    0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,0x39,0x37,0x39,0x34,0x39,0x32,0x31,
    0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x20,
    0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,
    0x2b,0x20,0x28,0x5f,0x31,0x39,0x37,0x20,0x2a,0x20,0x30,0x2e,0x31,0x36,0x36,0x36,
    0x36,0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,0x39,0x37,0x39,0x34,
    0x39,0x32,0x31,0x38,0x37,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,
    0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x34,0x33,0x20,0x3d,0x20,
    0x28,0x5f,0x32,0x31,0x39,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x28,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,0x2b,
    0x20,0x28,0x5f,0x31,0x39,0x37,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x35,0x29,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6d,0x61,0x67,0x65,0x2c,0x20,0x5f,0x39,0x38,0x20,0x2b,0x20,0x28,0x5f,0x31,
    0x39,0x37,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,
    0x34,0x37,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x34,0x33,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,
    0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,
    0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,
    0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,
    0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,
    0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x28,0x5f,0x32,0x34,0x37,0x20,0x3c,0x20,0x6d,0x69,0x6e,
    0x28,0x5f,0x31,0x32,0x35,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x69,0x6e,0x28,0x5f,
    0x31,0x30,0x39,0x2c,0x20,0x5f,0x31,0x31,0x33,0x29,0x2c,0x20,0x6d,0x69,0x6e,0x28,
    0x5f,0x31,0x31,0x37,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,0x29,0x29,0x29,0x20,0x7c,
    0x7c,0x20,0x28,0x5f,0x32,0x34,0x37,0x20,0x3e,0x20,0x6d,0x61,0x78,0x28,0x5f,0x31,
    0x32,0x35,0x2c,0x20,0x6d,0x61,0x78,0x28,0x6d,0x61,0x78,0x28,0x5f,0x31,0x30,0x39,
    0x2c,0x20,0x5f,0x31,0x31,0x33,0x29,0x2c,0x20,0x6d,0x61,0x78,0x28,0x5f,0x31,0x31,
    0x37,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,0x29,0x29,0x29,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,
    0x32,0x31,0x39,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x34,0x33,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before texture.h"
#endif
static inline const sg_shader_desc* texture_shader_desc(void) {
  #if defined(SOKOL_GLCORE33)
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texture_coord";
      desc.vs.source = texture_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "texture_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = texture_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "texture_image";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "texture_shader";
    };
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES3)
  if (sg_query_backend() == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texture_coord";
      desc.vs.source = texture_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "texture_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = texture_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "texture_image";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "texture_shader";
    };
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  return 0; /* can't happen */
}
