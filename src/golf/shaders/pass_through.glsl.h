#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input /Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl --output /Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl.h --slang metal_macos:metal_ios:glsl330

    Overview:

        Shader program 'pass_through':
            Get shader desc: pass_through_shader_desc(sg_query_backend());
            Vertex shader: pass_through_vs
                Attribute slots:
                    ATTR_pass_through_vs_position = 0
                Uniform block 'pass_through_vs_params':
                    C struct: pass_through_vs_params_t
                    Bind slot: SLOT_pass_through_vs_params = 0
            Fragment shader: pass_through_fs


    Shader descriptor structs:

        sg_shader pass_through = sg_make_shader(pass_through_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'pass_through_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_pass_through_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'pass_through_vs_params':

        pass_through_vs_params_t pass_through_vs_params = {
            .mvp_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_pass_through_vs_params, &SG_RANGE(pass_through_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_pass_through_vs_position (0)
#define SLOT_pass_through_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct pass_through_vs_params_t {
    mat4 mvp_mat;
} pass_through_vs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 pass_through_vs_params[4];
    layout(location = 0) in vec3 position;
    
    void main()
    {
        gl_Position = mat4(pass_through_vs_params[0], pass_through_vs_params[1], pass_through_vs_params[2], pass_through_vs_params[3]) * vec4(position, 1.0);
    }
    
*/
static const char pass_through_vs_source_glsl330[266] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x73,0x73,0x5f,
    0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x70,0x61,
    0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,
    0x72,0x6f,0x75,0x67,0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2c,0x20,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 g_frag_color;
    
    void main()
    {
        g_frag_color = vec4(1.0);
    }
    
*/
static const char pass_through_fs_source_glsl330[107] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x5f,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x5f,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct pass_through_vs_params
    {
        float4x4 mvp_mat;
    };
    
    struct main0_out
    {
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
    };
    
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant pass_through_vs_params& _21 [[buffer(0)]])
    {
        main0_out out = {};
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
        out.gl_Position = _21.mvp_mat * float4(in.position, 1.0);
        return out;
    }
    
*/
static const char pass_through_vs_source_metal_macos[621] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,
    0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x6d,0x76,0x70,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x31,0x33,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,
    0x65,0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,
    0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,
    0x6f,0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,
    0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,
    0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x31,0x33,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,
    0x65,0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,
    0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,
    0x6f,0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x5f,0x32,0x31,0x2e,0x6d,0x76,0x70,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 g_frag_color [[color(0)]];
    };
    
    #line 9 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
    fragment main0_out main0()
    {
        main0_out out = {};
    #line 9 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
        out.g_frag_color = float4(1.0);
        return out;
    }
    
*/
static const char pass_through_fs_source_metal_macos[402] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x2f,0x55,
    0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,0x64,
    0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,0x66,
    0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,
    0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x39,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,
    0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,
    0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,
    0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct pass_through_vs_params
    {
        float4x4 mvp_mat;
    };
    
    struct main0_out
    {
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
    };
    
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant pass_through_vs_params& _21 [[buffer(0)]])
    {
        main0_out out = {};
    #line 13 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
        out.gl_Position = _21.mvp_mat * float4(in.position, 1.0);
        return out;
    }
    
*/
static const char pass_through_vs_source_metal_ios[621] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,
    0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x6d,0x76,0x70,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x31,0x33,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,
    0x65,0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,
    0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,
    0x6f,0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,
    0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,
    0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x31,0x33,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,
    0x65,0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,
    0x6e,0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,
    0x6f,0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x5f,0x32,0x31,0x2e,0x6d,0x76,0x70,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 g_frag_color [[color(0)]];
    };
    
    #line 9 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
    fragment main0_out main0()
    {
        main0_out out = {};
    #line 9 "/Users/michaelgerdes/code/minigolf/src/golf/shaders/pass_through.glsl"
        out.g_frag_color = float4(1.0);
        return out;
    }
    
*/
static const char pass_through_fs_source_metal_ios[402] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x2f,0x55,
    0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,0x6c,0x67,0x65,0x72,0x64,
    0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,0x69,0x67,0x6f,0x6c,0x66,
    0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,
    0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,0x75,0x67,0x68,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x39,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x6d,0x69,0x63,0x68,0x61,0x65,
    0x6c,0x67,0x65,0x72,0x64,0x65,0x73,0x2f,0x63,0x6f,0x64,0x65,0x2f,0x6d,0x69,0x6e,
    0x69,0x67,0x6f,0x6c,0x66,0x2f,0x73,0x72,0x63,0x2f,0x67,0x6f,0x6c,0x66,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x70,0x61,0x73,0x73,0x5f,0x74,0x68,0x72,0x6f,
    0x75,0x67,0x68,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x5f,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before pass_through.glsl.h"
#endif
static inline const sg_shader_desc* pass_through_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = pass_through_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "pass_through_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = pass_through_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "pass_through_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = pass_through_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = pass_through_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.label = "pass_through_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = pass_through_vs_source_metal_ios;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = pass_through_fs_source_metal_ios;
      desc.fs.entry = "main0";
      desc.label = "pass_through_shader";
    }
    return &desc;
  }
  return 0;
}
