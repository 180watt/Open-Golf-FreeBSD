(define (generate N center_x center_y center_z width height inner_radius inner_height outer_height 
                  y_height friction cor vel_scale)
  (define-macro (while test . body) 
                `(call-with-exit
                   (lambda (break) 
                     (let continue ()
                       (if (let () ,test)
                           (begin 
                             (let () ,@body)
                             (continue))
                           (break))))))
  (define points_idx 0)
  (define points (make-vector (round (* N N ))))

  (define (add_point x y z)
    (terrain_model_add_point x y z)
    (vector-set! points points_idx (list x y z))
    (set! points_idx (+ points_idx 1))
    )

  (define i 0)
  (while (< i N)
         (define j 0)
         (while (< j N)
                (define tx (- (/ i (- N 1)) 0.5))
                (define tz (- (/ j (- N 1)) 0.5))
                (define dx (* width tx))
                (define dz (* width tz))
                (define x (+ center_x dx))
                (define z (+ center_z dz))
                (define p1 (perlin_noise (/ i N) (/ j N)))
                (define p2 (perlin_noise (/ j N) (/ i N)))
                (define dist (sqrt (+ (* dx dx) (* dz dz))))

                (cond ((< dist inner_radius)
                       (define y (+ inner_height p1))
                       (add_point x y z)
                       )
                      (else
                        (define a (/ (- dist inner_radius) (- (/ width 2) inner_radius)))
                        (define height (+ inner_height (* a (- outer_height inner_height))))
                        (cond ((< p2 0.2)
                               (define y (+ height (* 1 p1)))
                               (add_point x y z)
                               )
                              ((< p2 0.4)
                               (define y (+ height (* 2 p1)))
                               (add_point x y z)
                               ) 
                              ((< p2 0.6)
                               (define y (+ height (* 3 p1)))
                               (add_point x y z)
                               ) 
                              ((< p2 0.8)
                               (define y (+ height (* 4 p1)))
                               (add_point x y z)
                               ) 
                              (else
                                (define y (+ height (* 4 p1)))
                                (add_point x y z)
                                ) 
                              )
                        )
                      )
                (set! j (+ j 1))
                )
         (set! i (+ i 1))
         )

  (set! i 0)
  (while (< i (- N 1))
         (define j 0)
         (while (< j (- N 1))
                (define num_points 4)
                (define mat_idx 0)
                (define smooth_normal 0)
                (define x (round (+ (* (+ i 0) N) (+ j 0))))
                (define y (round (+ (* (+ i 0) N) (+ j 1))))
                (define z (round (+ (* (+ i 1) N) (+ j 1))))
                (define w (round (+ (* (+ i 1) N) (+ j 0))))
                (define tc0x (car (vector-ref points x)))
                (define tc0y (caddr (vector-ref points x)))
                (define tc1x (car (vector-ref points y)))
                (define tc1y (caddr (vector-ref points y)))
                (define tc2x (car (vector-ref points z)))
                (define tc2y (caddr (vector-ref points z)))
                (define tc3x (car (vector-ref points w)))
                (define tc3y (caddr (vector-ref points w)))
                (define texture_coord_scale 0.025)
                (terrain_model_add_face num_points mat_idx smooth_normal
                                        x y z w tc0x tc0y tc1x tc1y tc2x tc2y tc3x tc3y
                                        texture_coord_scale cor friction vel_scale)
                (set! j (+ j 1))
                )
         (set! i (+ i 1))
         )
  )
