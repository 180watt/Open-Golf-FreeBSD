int int_addition(int x, int y) {
    int z = x + y; 
    return z;
}

int int_subtraction(int x, int y) {
    int z = x - y; 
    return z;
}

float float_addition(float x, float y) {
    float z = x + y;
    return z;
}

float float_subtraction(float x, float y) {
    float z = x - y;
    return z;
}

vec2 vec2_addition(vec2 x, vec2 y) {
    vec2 z = x + y;
    return z;
}

vec2 vec2_subtraction(vec2 x, vec2 y) {
    vec2 z = x - y;
    return z;
}

vec2 vec2_scale(vec2 x, float s) {
    vec2 z = x * s;
    return z;
}

vec2 vec2_create(float x, float y) {
    return vec2(x, y);
}

vec3 vec3_addition(vec3 x, vec3 y) {
    vec3 z = x + y;
    return z;
}

vec3 vec3_subtraction(vec3 x, vec3 y) {
    vec3 z = x - y;
    return z;
}

vec3 vec3_scale(vec3 x, float s) {
    vec3 z = x * s;
    return z;
}

vec3 vec3_create(float x, float y, float z) {
    return vec3(x, y, z);
}

int fib(int n) {
    if (n == 0) {
        return 0;
    }
    else if (n == 1) {
        return 1;
    }
    else {
        return fib(n - 1) + fib(n - 2);
    }
}

int array_1(int n) {
    int[] array = [];
    for (int i = 0; i < n; i++) {
        array[i] = i;
    }
    return array.length;
}

int array_2(int n) {
    int[] array = [];
    for (int i = 0; i < n; i++) {
        array[i] = i;
    }

    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += array[i];
    }
    return sum;
}

int global_int = 0;
int global_1(int n) {
    global_int = global_int + n;
    return global_int;
}
