import "math.mscript";
import "util.mscript";
import "terrain_generation_common.mscript";

bool inited = false;
int stuff = 10;
int[] stuffs = NULL;
vec3[] vecs = [];
vec3 it = 4*4*vec3(1, 2, 3)*4;
vec3 UP = vec3(0.0, 1.0, 0.0);

void generate(int N, float height, float width, float length, 
        vec2 texture_size, vec2 texture_delta,
        vec2 bp0, vec2 bp1, vec2 bp2, vec2 bp3,
        float ground_friction, float ground_cor, float ground_vel_scale) {
    vec3[] points = [];

    float total_dist = 0.0;
    vec2 p0 = vec2(0.0, 0.0);

    for (int i = 0; i < N + 1; i++) {
        float t = (i + 0.0) / N;
        vec2 p = vec2_bezier(bp0, bp1, bp2, bp3, t);
        float x0 = 0.0;
        float x1 = width;
        float y = height * p.y;
        float z = length * p.x;

        points[points.length] = vec3(x0, y, z);
        points[points.length] = vec3(x1, y, z);

        vec2 p1 = vec2(z, y);
        total_dist = total_dist + vec2_distance(p0, p1); 
        p0 = p1;
    }

    for (int i = 0; i < points.length; i++) {
        terrain_model_add_point(points[i]);
    }

    float dist0 = 0.0;
    for (int i = 0; i < N; i++) {
        float t0 = (i + 0.0) / N;
        float t1 = (i + 1.0) / N;
        vec2 b0 = vec2_bezier(bp0, bp1, bp2, bp3, t0);
        vec2 b1 = vec2_bezier(bp0, bp1, bp2, bp3, t1);
        float dist1 = dist0 + vec2_distance(b0, b1);
        dist0 = dist1;

        int num_points = num_points;
        int mat_idx = 0;
        int smooth_normal = 0;
        float cor = ground_cor;
        float friction = ground_friction;
        float vel_scale = ground_vel_scale;
        float texture_coord_scale = 0.5;
        int a = 2 * (i + 1) + 0;
        int b = 2 * (i + 1) + 1;
        int c = 2 * (i + 0) + 1;
        int d = 2 * (i + 0) + 0;
        vec3 pa = points[a];
        vec3 pb = points[b];
        vec3 pc = points[c];
        vec3 pd = points[d];
        vec2 tc0 = vec2(pa.x, pa.z) + texture_delta;
        vec2 tc1 = vec2(pb.x, pb.z) + texture_delta;
        vec2 tc2 = vec2(pc.x, pc.z) + texture_delta;
        vec2 tc3 = vec2(pd.x, pd.z) + texture_delta;
        terrain_model_add_face(num_points, mat_idx, smooth_normal,
                a, b, c, d,
                tc0, tc1, tc2, tc3, texture_coord_scale,
                cor, friction, vel_scale, 0);
    }
}

int run(int n0, int n1, void* file_ptr) {
    //generate(100, 10.0, 10.0, 10.0, vec2(1.0, 1.0), vec2(0.0, 0.0),
            //vec2(0.0, 0.0), vec2(0.1, 0.1), vec2(0.3, 0.7), vec2(1.0, 1.0),
            //1.0, 1.0, 1.0);

    print("------------------------------\n");
    print("-------------RUN--------------\n");
    print("------------------------------\n");
    if (!inited) {
        stuffs = [];
        for (int i = 0; i <= 100; i++) {
            stuffs[stuffs.length] = 5 * i;
            vecs[vecs.length] = vec3(1, 2, 3);
        }
        inited = true;
    }

    it = it + vec3(1.0, 2.0, 3.0);
    print("it = ", it, "\n");

    int n = n0 + n1; 

    int file_size = c_file_size(file_ptr);
    print("file_size = ", file_size, "\n");

    vec3 sub_vec = vec3(0.0, 0.0, 0.0) - vec3(1.0, 2.0, 3.0);
    print("sub_vec = ", sub_vec, "\n");

    vec3 test_scale1 = 100*vec3(1, 2, 3);
    print("test_scale1 = ", test_scale1, "\n");
    vec3 test_scale2 = vec3(1, 2, 3)*200 + vec3(1, 2, 3);
    print("test_scale2 = ", test_scale2, "\n");

    vec3 all = vec3(1.0, 2.0, 3.0);
    for (int i = 0; i < 2; i++) {
        all = 2.0 * all;
    }
    print("all.x = ", all.x, "\n");
    print("all.y = ", all.y, "\n");
    print("all.z = ", all.z, "\n");
    for (int i = 0; i < 10; i++) {
        all = all + vecs[i];
    }
    print("all = ", all, "\n");

    vec3 v0 = vec3(1, 2, 3);
    vec3 v1 = vec3(1, 2, 3);
    print("v0 = ", v0, "\n");
    print("v1 = ", v1, "\n");
    print("dot = ", vec3_dot(v0, v1), "\n");

    float ss = 25.0;
    ss = sqrt(ss);
    print("ss = ", ss, "\n");

    print("stuff = ", stuff, "\n");
    stuff = stuff + 100;

    print("fib(10) = ", fib(10, 1), "\n");

    vec3 v = vec3(100.0, 100.0, 0.0);
    print("v = ", v, "\n");
    v = vec3_normalize(v);
    print("v = ", v, "\n");

    for (int i = 0; i < 4; i++) {
        float theta = i * 0.5 * PI;
        float c = cos(theta);
        float s = sin(theta);
        print("cos(", theta, ") = ", c, "\n");
        print("sin(", theta, ") = ", s, "\n");

        print("acos(", c, ") = ", acos(cos(theta)), "\n");
        print("asin(", s, ") = ", asin(sin(theta)), "\n");
    }
    print("UP = ", UP, "\n");

    vec2 v2 = vec2(1, 2) + 4*vec2(2, 4);
    print("v2 = ", v2, "\n");

    //for (i = 0; i < stuffs.length; i++) {
        //print(i, ": ", stuffs[i], "\n");
        //stuffs[i] += 5;
    //}

    return 100;
}
