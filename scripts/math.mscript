struct vec2 {
    float x, y;
}

vec2 vec2_add(vec2 a, vec2 b) {
    return {
        x = a.x + b.x,
        y = a.y + b.y
    };
}

vec2 vec2_sub(vec2 a, vec2 b) {
    return {
        x = a.x - b.x,
        y = a.y - b.y
    };
}

vec2 vec2_scale(vec2 a, float s) {
    return {
        x = a.x * s,
        y = a.y * s
    };
}

float vec2_distance(vec2 a, vec2 b) {
    vec2 d = vec2_sub(a, b);
    return vec2_dot(d, d);
}

float vec2_dot(vec2 a, vec2 b) {
    return a.x * b.x + a.y * b.y;
}

vec2 vec2_bezier(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t) {
    float t1 = 1.0 - t;
    return {
        x = p0.x * t1 * t1 * t1 + 3 * p1.x * t * t1 * t1 + p2.x * 3 * t * t * t1 + p3.x * t * t * t,
        y = p0.y * t1 * t1 * t1 + 3 * p1.y * t * t1 * t1 + p2.y * 3 * t * t * t1 + p3.y * t * t * t
    };
}

struct vec3 {
    float x, y, z;
}

vec3 vec3_add(vec3 a, vec3 b) {
    return { 
        x = a.x + b.x, 
        y = a.y + b.y, 
        z = a.z + b.z 
    };
}

vec3 vec3_sub(vec3 a, vec3 b) {
    return {
        x = a.x - b.x,
        y = a.y - b.y,
        z = a.z - b.z
    };
}

vec3 vec3_scale(vec3 v, float s) {
    return {
        x = v.x * s,
        y = v.y * s,
        z = v.z * s
    };
}

float vec3_distance(vec3 v0, vec3 v1) {
    vec3 d = vec3_sub(v1, v0);
    return vec3_dot(d, d);
}

float vec3_dot(vec3 a, vec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

float vec3_length_sqrd(vec3 v) {
    print("vec3_length_sqrd\n");
    return vec3_dot(v, v);
}
