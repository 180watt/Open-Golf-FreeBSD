struct vec2 {
    float x;
    float y;
}

struct vec3 {
    float x;
    float y;
    float z;
}

struct test {
    int t;
    vec2 v2;
    vec3 v3;
}

//float vec2_distance_sqrd(vec2 v0, vec2 v1) {
    //float dx = v1.x - v0.x;
    //float dy = v1.y - v0.y;
    //return dx * dx + dy * dy;
//}

//int testing(int a, int b, int c) {
    //int d = a + b;
    //return d + c;
//}

//int fib(int n) {
    //int val = 0;
    //if (n <= 0) {
        //val = 0;
    //}
    //else if (n == 1) {
        //val = 1;
    //}
    //else {
        //val = fib(n - 1) + fib(n - 2);
    //}
    //return val;
//}

int sum(int n, int s) {
    if (n == 0) {
        return s;
    }

    return sum(n - 1, s + n);
}

vec3 vec3_add(vec3 a, vec3 b) {
    vec3 r;
    r.x = a.x + b.x;
    r.y = a.y + b.y;
    r.z = a.z + b.z;
    return r;
}

int run() {
    vec3 a;
    a.x = 1.0;
    a.y = 2.0;
    a.z = 3.0;

    vec3 b;
    b.x = 1.0;
    b.y = 2.0;
    b.z = 3.0;

    vec3 c = vec3_add(a, b);

    test t;
    t.v3.x = a.x;

    int x = sum(c.x + c.y + c.z, 0);
    return x;
}

//float vec3_distance(vec3 v0, vec3 v1) {
//    float dx = v1.x - v0.x;
//    float dy = v1.y - v0.y;
//    float dz = v1.z - v0.z;
//    return sqrt(dx * dx + dy * dy + dz * dz);
//}
//
//vec3 vec3_scale(vec3 v, float s) {
//    return vec3_create(v.x * s, v.y * s, v.z * s);
//}
//
//int fib(int n) {
//    if (n <= 0) {
//        return 0; 
//    }
//    else if (n == 1) {
//        return 1;
//    }
//    else {
//        return fib(n - 1) + fib(n - 2);
//    }
//}
//
//int main() {
//    int y;
//    int x = 10 + fib(10);
//    y = 0.5*10;
//    x = y + 10;
//    return fib(x);
//}
