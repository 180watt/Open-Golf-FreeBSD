import "math.mscript";
import "util.mscript";
import "terrain_generation/common.mscript";

int array_to_int(int[] array) {
    if (array.length > 0) {
        return array[0];
    }
    return 0;
}

int count_array(int[] array) {
    double_array(array);

    int sum = 0;
    int i;
    for (i = 0; i < array.length; i++) {
        sum = sum + array[i+1.0];
    }

    if (sum) {
        return array_to_int(array);
    }

    sum = 1 + 2;
    if (sum > 0) {
        return sum;
    }
    else if (sum < 0) {
        return 0;
    }
    return 100;
    //return 100;
}

void double_array(int[] array) {
    int i;
    for (i = 0; i < array.length; i++) {
        array[i] = 2 * array[i];
        if (i > 2) {
            return;
        }
    }
}

int recur1(int a) {
    if (a > 0) {
        return recur2(a - 1);
    }
    return 0;
}

int recur2(int b) {
    float a = b - 2;
    if (b > 0) return recur2(b - 1);
    else if (b > 0) return recur1(b - a);
    return 0;
}

int do_stuff(void *terrain_model) {
    terrain_model_add_point(terrain_model, { x = 2, y = 3, z = 4 });
    return 1;
}

int run(void* terrain_model) {
    vec3 a;
    a.x = 10;
    a.y = 10;
    a.z = 10;

    {
        vec3 b;
        b.x = 10;
        b.y = 10;
        b.z = 10;
    }

    {
        vec3 c;
        c.x = 10;
        c.y = 10;
        c.z = 10;
    }

    vec3[] array = [ { x = 1, y = 2, z = 3 }, { x = 1, y = 2, z = 3 } ];
    array[array.length] = { x = 1, y = 1, z = 1 };
    array[array.length] = { x = 2, y = 2, z = 2 };
    array[array.length] = { x = 3, y = 3, z = 3 };

    terrain_model_face face = {
        mat_idx = 0, smooth_normal = 0,
        x = 0, y = 1, z = 2, w = 3,
        tc0 = { x = 0, y = 1 }, 
        tc1 = { x = 0, y = 1 }, 
        tc2 = { x = 0, y = 1 }, 
        tc3 = { x = 0, y = 1 }, 
        tex_coord_scale = 0.0,
        cor = 0.0,
        friction = 0.0,
        vel_scale = 0.0,
        auto_texture = 0
    };
    face.friction = 100;
    terrain_model_add_face(terrain_model, face);

    debug_print("array: ", array, "\n");
    debug_print("length: ", array.length, "\n");
    debug_print("face: ", face, "\n");

    return 0;
}

struct foobar {
    vec2 t;
}

struct bar {
    foobar[] foobars;
}

struct foo {
    bar[] bars;
}

int test() {
    foo f = { bars = [ { foobars = [ { t = { x = 0, y = 1 } } ] } ] };
    f.bars[0].foobars[0].t = { x = 0, y = 1 };

    //
    // LOCAL_LOAD 0, 4
    // CONST_INT 0
    // CONST_INT 0
    // IADD
    // ARRAY_LOAD 4
    // CONST_INT 0
    // CONST_INT 0
    // IADD
    // ARRAY_STORE 8
    //

    vec3 a = { x = 1, y = 2, z = 3 };
    vec3 b = { x = 1, y = 2, z = 3 };
    vec3 c = { x = a.x + b.x, y = a.y - b.y, z = a.z / b.z };

    vec3[] array = [];
    array[array.length] = a;
    array[array.length] = b;
    array[array.length] = c;

    return 0;
}
