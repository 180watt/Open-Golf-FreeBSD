import "math.mscript";

struct vec2 {
    float x;
    float y;
}

struct vec3 {
    float x;
    float y;
    float z;
}

vec3 vec3_add(vec3 a, vec3 b) {
    return { 
        x = a.x + b.x, 
        y = a.y + b.y, 
        z = a.z + b.z 
    };
}

vec3 vec3_sub(vec3 a, vec3 b) {
    return {
        x = a.x - b.x,
        y = a.y - b.y,
        z = a.z - b.z
    };
}

vec3 vec3_scale(vec3 v, float s) {
    return {
        x = v.x * s,
        y = v.y * s,
        z = v.z * s
    };
}

float vec3_distance(vec3 v0, vec3 v1) {
    vec3 d = vec3_sub(v1, v0);
    return vec3_dot(d, d);
}

float vec3_dot(vec3 a, vec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

struct foo {
    vec3 v0;
    vec3 v1;
}

int run() {
    vec3 vec3 = { x = 1 };
    vec3.y = vec3.x + vec3.x;
    vec3 v = { x = 1 };
    foo f = { 
        v0 = { x = v.x, y = v.y, z = v.z },
        v1 = { x = 1, y = 2, z = 3 }
    };
    int s = vec3_scale(vec3, vec3.x).x;
    return vec3_distance({ x = 1, y = 2, z = 3 }, { x = 1, y = 2, z = 30 });
}
